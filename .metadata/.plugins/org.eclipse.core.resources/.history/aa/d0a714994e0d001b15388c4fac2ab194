#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
#include <sched.h>
#include "globalmsg.h"
#include <sys/dispatch.h>

enum states {
	State0,
	State1,
	State2,
	State3,
	State4,
	State5,
	State6,
	State7,
	State8,
	State9,
	State10,
	State11,
	State12,
	State13,
	Emergency
};
typedef enum {
	OFF, RED, YELLOW, GREEN, FLASHING_RED
} Traffic_Light_States;

struct Intersection_Light_Outputs {

	int north_Light;
	int south_Light;
	int east_Light;
	int west_Light;

	int north_Left_Light;
	int south_Left_Light;
	int east_Left_Light;
	int west_Left_Light;

	int north_Ped_Light;
	int south_Ped_Light;
	int east_Ped_Light;
	int west_Ped_Light;
};

int datahour;
int flag;
// Prototype functions
/////////////////////////////////////////////////////////////////////////////////////////////////////
int check_GateState();
char* return_state(int val);
void intersection_SM(enum states *current_State);
void *thread_PeakHour(void *datahour);
void *Client(void *data);
void display_output(struct Intersection_Light_Outputs *Light_Output);
void state0_func(struct Intersection_Light_Outputs *Light_Output);
void state1_func(struct Intersection_Light_Outputs *Light_Output);
void state2_func(struct Intersection_Light_Outputs *Light_Output);
void state3_func(struct Intersection_Light_Outputs *Light_Output);
void state4_func(struct Intersection_Light_Outputs *Light_Output);
void state5_func(struct Intersection_Light_Outputs *Light_Output);
void state6_func(struct Intersection_Light_Outputs *Light_Output);
void state7_func(struct Intersection_Light_Outputs *Light_Output);
void state8_func(struct Intersection_Light_Outputs *Light_Output);
void state9_func(struct Intersection_Light_Outputs *Light_Output);
void state10_func(struct Intersection_Light_Outputs *Light_Output);
void state11_func(struct Intersection_Light_Outputs *Light_Output);
void state12_func(struct Intersection_Light_Outputs *Light_Output);
void state13_func(struct Intersection_Light_Outputs *Light_Output);
///////////////////////////////////////////////////////////////////////////////////////////////////////

int main(void) {
	puts("Project - Intersection"); /* prints Hello World!!! */

	flag =0;

	//create thread
	pthread_t th1,th3;

	pthread_create(&th1, NULL, thread_PeakHour, NULL);
	pthread_create(&th3, NULL, Client, NULL);
	pthread_join(th1, NULL);
	pthread_join(th3, NULL);

	/*enum states current_state = State0;
	 intersection_SM(&current_state);*/

	puts("End of program");
	return EXIT_SUCCESS;
}

/* 	State List:

 state 0 = initial state (all red).
 state 1 = N/S NLeft/SLeft green.
 state 2 = N/S Green. Nleft/SLeft Off. Peds E/W green
 state 3 = N/S Green. E/W Ped flash Red.
 State 4 = N/S Yellow. E/W Ped Hard Red.

 state 5 =
 state 6 =
 state 7 =
 state 8 =

 state 9 = All Red
 state 10 = E/W ELeft/WLeft green.
 state 11 = E/W Green. Eleft/WLeft Off. Peds N/S green
 state 12 = E/W Green. N/S Ped flash Red.
 state 13 = E/W Yellow. N/S Ped Hard Red.

 Emergency = all lights blink yellow
 */
void *thread_PeakHour(void *datahour) {
	enum states current_state = State0;

	while (1) {

		intersection_SM(&current_state);
	}
	return 0;

}
void intersection_SM(enum states *current_State) {

	struct Intersection_Light_Outputs Intersection2;
	//int cur_state =

	switch (*current_State) {

	case State0:
		//Check if the boom gates are lowered


		//			N, 		S, 		E, 		W,	NLeft, 	Sleft, 	Eleft, Wleft, Npeds, Speds, Epeds, Wpeds
		//	set_lights(RED,		RED,	RED,	RED,RED,	RED,	RED)

		state0_func(&Intersection2);
		// if gate state is 0 then continue as normal else go to boom gate states.
		if(check_GateState()==0){
			*current_State = State1;
		}
		else
			*current_State = State5;
		break;

	case State1:
		state1_func(&Intersection2);
		*current_State = State2;
		break;

	case State2:
		state2_func(&Intersection2);
		*current_State = State3;
		break;

	case State3:
		state3_func(&Intersection2);
		*current_State = State4;
		break;

	case State4:
		state4_func(&Intersection2);
		*current_State = State9;
		break;

	case State5:
		state5_func(&Intersection2);
		*current_State = State6;
		break;

	case State6:
		state6_func(&Intersection2);
		*current_State = State7;
		break;

	case State7:
		state7_func(&Intersection2);
		*current_State = State8;
		break;

	case State8:
		state8_func(&Intersection2);
		*current_State = State9;
		break;

	case State9:
		state9_func(&Intersection2);
		*current_State = State10;
		break;

	case State10:
		state10_func(&Intersection2);
		*current_State = State11;
		break;

	case State11:
		state11_func(&Intersection2);
		*current_State = State12;
		break;
	case State12:
		state12_func(&Intersection2);
		*current_State = State13;
		break;

	case State13:
		state13_func(&Intersection2);
		*current_State = State0;
		break;
	case Emergency:

		break;
	default:
		*current_State = State0;
	}
	display_output(&Intersection2);
	sleep(1);

}


// This function will grab check the signal from control and return a value.
// If no connection is found then it will go to emergency state
int check_GateState(){
	if (flag ==0)
		return 0;
	else
		return 1;
}



// Display all the traffic/pedestrian output lights to the console
void display_output(struct Intersection_Light_Outputs *Light_Output) {

	printf("North state = %s", return_state(Light_Output->north_Light));
	printf("		");
	printf("South State = %s", return_state(Light_Output->south_Light));
	printf("		");
	printf("East State = %s", return_state(Light_Output->east_Light));
	printf("		");
	printf("West State = %s \n", return_state(Light_Output->west_Light));

	printf("North left state = %s ", return_state(Light_Output->north_Left_Light));
	printf("	");
	printf("South left state = %s ", return_state(Light_Output->south_Left_Light));
	printf("	");
	printf("East left state = %s ", return_state(Light_Output->east_Left_Light));
	printf("	");
	printf("West left State = %s \n", return_state(Light_Output->west_Left_Light));

	printf("North Peds State = %s", return_state(Light_Output->north_Ped_Light));
	printf("	");
	printf("South Peds State = %s", return_state(Light_Output->south_Ped_Light));
	printf("	");
	printf("East Peds State = %s", return_state(Light_Output->east_Ped_Light));
	printf("	");
	printf("West Peds State = %s \n\n", return_state(Light_Output->west_Ped_Light));

}
void *Client(void *data)
{
  my_data msg;

  my_reply reply; // replymsg structure for sending back to client

  msg.ClientID = 600;  // unique number for this client
  msg.hdr.type = 0x22; // We would have pre-defined data to stuff here

  int server_coid;
  int Flag_to_Send_Data = 1;
  int data_sent = 0;
  while (Flag_to_Send_Data)
  {
    if (data_sent == 0)
    {
      printf("  ---> Trying to connect to server named: %s\n", QNET_ATTACH_POINT);
      if ((server_coid = name_open(QNET_ATTACH_POINT, 0)) == -1)
      {
        printf("\n    ERROR, could not connect to server!\n\n");

        return EXIT_FAILURE;
      }

      // set up data packet
      msg.data.float_data = 0.5;

      if (MsgSend(server_coid, &msg, sizeof(msg), &reply, sizeof(reply)) == -1)
      {
        printf(" Error data '%d' NOT sent to server\n", msg.data);
        // maybe we did not get a reply from the server
        break;
      }
      else
      { // now process the reply
        data_sent = 1;
      }

      //sleep(5);	// wait a few seconds before sending the next data packet
    }
    else
    {
      data_sent = 1;
    }
  }
  return NULL;
}

char* return_state(int val){

	if(val == 0)
		return "OFF (0)";
	else if (val == 1)
		return "RED (1)";
	else if (val ==2)
		return "YELLOW(2)";
	else if (val == 3)
		return "GREEN (3)";
	else if(val ==4)
		return "FLASH RED(4)";
	else
		return "ERROR";


}

//set light outputs to the corresponding state
void state0_func(struct Intersection_Light_Outputs *Light_Output) {
	printf("State0 \n");
	Light_Output->north_Light = RED;
	Light_Output->south_Light = RED;
	Light_Output->east_Light = RED;
	Light_Output->west_Light = RED;

	Light_Output->north_Left_Light = RED;
	Light_Output->south_Left_Light = RED;
	Light_Output->east_Left_Light = RED;
	Light_Output->west_Left_Light = RED;

	Light_Output->north_Ped_Light = RED;
	Light_Output->south_Ped_Light = RED;
	Light_Output->east_Ped_Light = RED;
	Light_Output->west_Ped_Light = RED;
}
void state1_func(struct Intersection_Light_Outputs *Light_Output) {
	printf("State1 \n");
	Light_Output->north_Light = GREEN;
	Light_Output->south_Light = GREEN;
	Light_Output->east_Light = RED;
	Light_Output->west_Light = RED;

	Light_Output->north_Left_Light = GREEN;
	Light_Output->south_Left_Light = GREEN;
	Light_Output->east_Left_Light = RED;
	Light_Output->west_Left_Light = RED;

	Light_Output->north_Ped_Light = RED;
	Light_Output->south_Ped_Light = RED;
	Light_Output->east_Ped_Light = RED;
	Light_Output->west_Ped_Light = RED;
}
void state2_func(struct Intersection_Light_Outputs *Light_Output) {
	printf("State2 \n");
	Light_Output->north_Light = GREEN;
	Light_Output->south_Light = GREEN;
	Light_Output->east_Light = RED;
	Light_Output->west_Light = RED;

	Light_Output->north_Left_Light = OFF;
	Light_Output->south_Left_Light = OFF;
	Light_Output->east_Left_Light = RED;
	Light_Output->west_Left_Light = RED;

	Light_Output->north_Ped_Light = RED;
	Light_Output->south_Ped_Light = RED;
	Light_Output->east_Ped_Light = GREEN;
	Light_Output->west_Ped_Light = GREEN;
}
void state3_func(struct Intersection_Light_Outputs *Light_Output) {
	printf("State3 \n");
	Light_Output->north_Light = GREEN;
	Light_Output->south_Light = GREEN;
	Light_Output->east_Light = RED;
	Light_Output->west_Light = RED;

	Light_Output->north_Left_Light = OFF;
	Light_Output->south_Left_Light = OFF;
	Light_Output->east_Left_Light = RED;
	Light_Output->west_Left_Light = RED;

	Light_Output->north_Ped_Light = RED;
	Light_Output->south_Ped_Light = RED;
	Light_Output->east_Ped_Light = FLASHING_RED;
	Light_Output->west_Ped_Light = FLASHING_RED;
}
void state4_func(struct Intersection_Light_Outputs *Light_Output) {
	printf("State4 \n");
	Light_Output->north_Light = YELLOW;
	Light_Output->south_Light = YELLOW;
	Light_Output->east_Light = RED;
	Light_Output->west_Light = RED;

	Light_Output->north_Left_Light = OFF;
	Light_Output->south_Left_Light = OFF;
	Light_Output->east_Left_Light = RED;
	Light_Output->west_Left_Light = RED;

	Light_Output->north_Ped_Light = RED;
	Light_Output->south_Ped_Light = RED;
	Light_Output->east_Ped_Light = RED;
	Light_Output->west_Ped_Light = RED;
}
//////////////////////////////////////////////////////
//ADD OFF PEAK HOUR STATES HERE
void state5_func(struct Intersection_Light_Outputs *Light_Output) {
	printf("State5 \n");
	Light_Output->north_Light = RED;
	Light_Output->south_Light = GREEN;
	Light_Output->east_Light = RED;
	Light_Output->west_Light = RED;

	Light_Output->north_Left_Light = RED;
	Light_Output->south_Left_Light = GREEN;
	Light_Output->east_Left_Light = RED;
	Light_Output->west_Left_Light = RED;

	Light_Output->north_Ped_Light = RED;
	Light_Output->south_Ped_Light = RED;
	Light_Output->east_Ped_Light = RED;
	Light_Output->west_Ped_Light = RED;
}
void state6_func(struct Intersection_Light_Outputs *Light_Output) {
	printf("State6 \n");
	Light_Output->north_Light = RED;
	Light_Output->south_Light = GREEN;
	Light_Output->east_Light = RED;
	Light_Output->west_Light = RED;

	Light_Output->north_Left_Light = RED;
	Light_Output->south_Left_Light = OFF;
	Light_Output->east_Left_Light = RED;
	Light_Output->west_Left_Light = RED;

	Light_Output->north_Ped_Light = RED;
	Light_Output->south_Ped_Light = RED;
	Light_Output->east_Ped_Light = GREEN;
	Light_Output->west_Ped_Light = GREEN;
}
void state7_func(struct Intersection_Light_Outputs *Light_Output) {
	printf("State7 \n");
	Light_Output->north_Light = RED;
	Light_Output->south_Light = GREEN;
	Light_Output->east_Light = RED;
	Light_Output->west_Light = RED;

	Light_Output->north_Left_Light = RED;
	Light_Output->south_Left_Light = OFF;
	Light_Output->east_Left_Light = RED;
	Light_Output->west_Left_Light = RED;

	Light_Output->north_Ped_Light = RED;
	Light_Output->south_Ped_Light = RED;
	Light_Output->east_Ped_Light = FLASHING_RED;
	Light_Output->west_Ped_Light = FLASHING_RED;
}
void state8_func(struct Intersection_Light_Outputs *Light_Output) {
	printf("State8 \n");
	Light_Output->north_Light = RED;
	Light_Output->south_Light = YELLOW;
	Light_Output->east_Light = RED;
	Light_Output->west_Light = RED;

	Light_Output->north_Left_Light = RED;
	Light_Output->south_Left_Light = OFF;
	Light_Output->east_Left_Light = RED;
	Light_Output->west_Left_Light = RED;

	Light_Output->north_Ped_Light = RED;
	Light_Output->south_Ped_Light = RED;
	Light_Output->east_Ped_Light = RED;
	Light_Output->west_Ped_Light = RED;
}
/////////////////////////////////////////////////////
void state9_func(struct Intersection_Light_Outputs *Light_Output) {
	printf("State9 \n");
	Light_Output->north_Light = RED;
	Light_Output->south_Light = RED;
	Light_Output->east_Light = RED;
	Light_Output->west_Light = RED;

	Light_Output->north_Left_Light = RED;
	Light_Output->south_Left_Light = RED;
	Light_Output->east_Left_Light = RED;
	Light_Output->west_Left_Light = RED;

	Light_Output->north_Ped_Light = RED;
	Light_Output->south_Ped_Light = RED;
	Light_Output->east_Ped_Light = RED;
	Light_Output->west_Ped_Light = RED;
}
void state10_func(struct Intersection_Light_Outputs *Light_Output) {
	printf("State10 \n");
	Light_Output->north_Light = RED;
	Light_Output->south_Light = RED;
	Light_Output->east_Light = GREEN;
	Light_Output->west_Light = GREEN;

	Light_Output->north_Left_Light = RED;
	Light_Output->south_Left_Light = RED;
	Light_Output->east_Left_Light = GREEN;
	Light_Output->west_Left_Light = GREEN;

	Light_Output->north_Ped_Light = RED;
	Light_Output->south_Ped_Light = RED;
	Light_Output->east_Ped_Light = RED;
	Light_Output->west_Ped_Light = RED;
}
void state11_func(struct Intersection_Light_Outputs *Light_Output) {
	printf("State11 \n");
	Light_Output->north_Light = RED;
	Light_Output->south_Light = RED;
	Light_Output->east_Light = GREEN;
	Light_Output->west_Light = GREEN;

	Light_Output->north_Left_Light = RED;
	Light_Output->south_Left_Light = RED;
	Light_Output->east_Left_Light = OFF;
	Light_Output->west_Left_Light = OFF;

	Light_Output->north_Ped_Light = GREEN;
	Light_Output->south_Ped_Light = GREEN;
	Light_Output->east_Ped_Light = RED;
	Light_Output->west_Ped_Light = RED;
}
void state12_func(struct Intersection_Light_Outputs *Light_Output) {
	printf("State12 \n");
	Light_Output->north_Light = RED;
	Light_Output->south_Light = RED;
	Light_Output->east_Light = GREEN;
	Light_Output->west_Light = GREEN;

	Light_Output->north_Left_Light = RED;
	Light_Output->south_Left_Light = RED;
	Light_Output->east_Left_Light = OFF;
	Light_Output->west_Left_Light = OFF;

	Light_Output->north_Ped_Light = FLASHING_RED;
	Light_Output->south_Ped_Light = FLASHING_RED;
	Light_Output->east_Ped_Light = RED;
	Light_Output->west_Ped_Light = RED;
}
void state13_func(struct Intersection_Light_Outputs *Light_Output) {
	printf("State13 \n");
	Light_Output->north_Light = RED;
	Light_Output->south_Light = RED;
	Light_Output->east_Light = YELLOW;
	Light_Output->west_Light = YELLOW;

	Light_Output->north_Left_Light = RED;
	Light_Output->south_Left_Light = RED;
	Light_Output->east_Left_Light = OFF;
	Light_Output->west_Left_Light = OFF;

	Light_Output->north_Ped_Light = RED;
	Light_Output->south_Ped_Light = RED;
	Light_Output->east_Ped_Light = RED;
	Light_Output->west_Ped_Light = RED;
}
