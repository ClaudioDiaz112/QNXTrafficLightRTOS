#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
#include <sched.h>

enum states {
	State0, State1, State2, State3
};
enum states CurState;
enum TrueFalse {
	True, False
};
enum TrueFalse TrainSensorE;
enum TrueFalse TrainSensorW;

pthread_mutex_t condition_mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t  condition_cond  = PTHREAD_COND_INITIALIZER;
int flag;



typedef enum {
	OFF, FLASHING, CLOSED, OPEN
} Traffic_Light_States;
//
//enum states, OFF = 1, FLASHING = 2, CLOSED = 3, OPEN = 4
//

struct Train_Outputs {
	int Lights;
	int BoomGates;
};

int PeakHour() { //decodes whether it is peak hour based upon communication from central node defined by flag variable
	if (flag == 1)
		return 1;
	else
		return 0;
}



void state0_func(struct Train_Outputs *Light_Output) {

	Light_Output->Lights = FLASHING;
	Light_Output->BoomGates = OPEN;
}

void state1_func(struct Train_Outputs *Light_Output) {

	Light_Output->Lights = FLASHING;
	Light_Output->BoomGates = CLOSED;
}

void state2_func(struct Train_Outputs *Light_Output) {

	Light_Output->Lights = FLASHING;
	Light_Output->BoomGates = OPEN;
}

void state3_func(struct Train_Outputs *Light_Output) {

	Light_Output->Lights = OFF;
	Light_Output->BoomGates = OPEN;
}

void display_output(struct Train_Outputs *Light_Output) {

	printf("Lights = %d\n", Light_Output->Lights);
	if (Light_Output->Lights == 1)
		printf("LIGHTS = OFF\n");
	else
		printf("LIGHTS = FLASHING\n");
	//printf("	\n");
	printf("BoomGates = %d \n", Light_Output->BoomGates);
	if (Light_Output->BoomGates == 3)
		printf("BOOMGATES = CLOSED\n");
	else
		printf("BOOMGATES = OPEN\n");
	printf("	\n");

}

void BoomGateNS_SM(enum states* CurState) {

	struct Train_Outputs States;

	switch (*CurState) {
	case State0:
		state0_func(&States);
		*CurState = State1;

		printf("State (0)\n");
		TrainSensorE = False;
		TrainSensorW = False;

		sleep(2); //simulates gates beginning to close
		break;

	case State1:
		state1_func(&States);
		printf("State (1)\n");
		sleep(5); //simulates train passing through

		if (TrainSensorE == True || TrainSensorW == True)
			*CurState = State1;
		else
			*CurState = State2;
		break;

	case State2:
		state2_func(&States);
		*CurState = State3;

		printf("State (2)\n");
		sleep(5); //simulates gates opening

		break;

	case State3:
		state3_func(&States);

		printf("State (3)\n");
		sleep(2); //simulates time after gates are open and traffic can move through

		if (TrainSensorE == True || TrainSensorW == True)
			*CurState = State0;
		else
			*CurState = State3;

		break;
	}
	display_output(&States);
	sleep(1);
}

void Train_Sensor(enum states* CurState) {
	int Runtimes = 4, counter = 0;
	while (counter < Runtimes) {
		BoomGateNS_SM(CurState);  // pass address
		counter++;
	}
}

void *thread_PeakHour(void *data) {
	printf("TRAIN CROSSING NODE IS SET TO PEAK HOUR\n");
	pthread_mutex_lock( &condition_mutex );

	//run this based on timers
	while (1) {
		sleep(10);
		printf("\n");
		printf("Train coming\n");
		enum states CurState = State0;
		Train_Sensor(&CurState);
		TrainSensorE = True;
	}
	pthread_mutex_unlock( &condition_mutex );
	printf("ENDING TRAIN CROSSING PEAK HOUR THREAD\n");
	return 0;
}

void *thread_NotPeakHour(void *data) {
//run this based on timers
	printf("TRAIN CROSSING NODE IS SET TO NOT PEAK HOUR\n");
	pthread_mutex_lock( &condition_mutex );

	while (1) {
		sleep(2);
		printf("\n");
		printf("Train coming\n");
		enum states CurState = State0;
		Train_Sensor(&CurState);
		TrainSensorE = True;

	}
	pthread_mutex_unlock( &condition_mutex );
	printf("ENDING TRAIN CROSSING NOT PEAK HOUR THREAD\n");
	return 0;
}

void Emergency_Thread() { //add emergency states that will switch to this thread if there is no uplink with central node
//blinks lights yellow and then red

}

void Changing_PeakHour_Thread() {
	//blinks all lights yellow once when changing from peak hour to non peak hour
}

int main(int argc, char *argv[]) {
	printf("STARTING TRAIN CROSSING NODE\n");




	flag = 1; //for testing--replace with code to decide peak hour via IPC to central node

	//trigger to create thread for local message passing whoch will trigger the train inputs
	//trigger for ipc communication to accept user inputs for train sensors

	pthread_t th1, th2;

	//is it peak hour??
	//if yes start peak if not start non peak
	//if (PeakHour() == 0)

	//create threads then only swap if IPC comm is sent, so peak hour thread is constantly running unless swap
	pthread_create(&th1, NULL, thread_PeakHour, NULL); //default starting position
	pthread_create(&th2, NULL, thread_NotPeakHour, NULL);

	//interrupt thread creation for if uplink fails

	pthread_join(th1, NULL);
	pthread_join(th2, NULL);

	printf("EXITING TRAIN CROSSING NODE\n");

	return 0;

}








